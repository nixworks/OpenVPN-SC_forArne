/*
 * Copyright (c) 2012-2016 Arne Schwabe
 * Distributed under the GNU GPL v2 with additional terms. For full terms see the file doc/LICENSE.txt
 */

import com.android.builder.model.ProductFlavor

apply plugin: 'com.android.application'

apply plugin: 'checkstyle'
checkstyle {
    showViolations true
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.google.com' }
}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:support-annotations:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    //    compile 'ch.acra:acra:4.5.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.2'
    implementation 'net.java.dev.jna:jna:4.5.1@aar'
    implementation project(':pkcs11wrapper')
    implementation files('../external/pkcs11jna/java/pkcs11jna.jar')

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.16.0'
    testImplementation "org.robolectric:robolectric:3.7.1"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'org.bouncycastle:bcprov-jdk15on:1.59'

}



def openvpn3SwigFiles = new File(buildDir, "generated/source/ovpn3swig/ovpn3")

task ("generateOpenVPN3Swig" ,type:Exec) {
    def swigcmd = "swig"
    // Workaround for Mac OS X since it otherwise does not find swig and I cannot get
    // the Exec task to respect the PATH environment :(
    if (file("/usr/local/bin/swig").exists())
        swigcmd = "/usr/local/bin/swig"

    doFirst {
        mkdir openvpn3SwigFiles
    }
    commandLine swigcmd, "-outdir", openvpn3SwigFiles, "-outcurrentdir", "-c++", "-java", "-package", "net.openvpn.ovpn3",
            "-Isrc/main/cpp/openvpn3/client", "-Isrc/main/cpp/openvpn3/",
            "-o", "${openvpn3SwigFiles}/ovpncli_wrap.cxx", "-oh", "${openvpn3SwigFiles}/ovpncli_wrap.h",
            "src/main/cpp/openvpn3/javacli/ovpncli.i"
\
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        versionCode = 157
        versionName = "0.7.4"

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_STL=c++_static'
                //abiFilters "arm64-v8a"
            }
        }

        ndk {
            abiFilters "armeabi-v7a"
        }

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'build/ovpnassets']
        }

        normal {
            java.srcDirs =["src/ovpn3/java/", openvpn3SwigFiles]
        }

        noovpn3 {
        }

        debug {

        }

        release {

        }
    }

    signingConfigs {
        release {
            storeFile project.hasProperty("keystorePath") ? file(project.property("keystorePath")) : null
            storePassword project.hasProperty("keystorePass") ? project.property("keystorePass") : null
            keyAlias project.hasProperty("keyAlias") ? project.property("keyAlias") : null
            keyPassword project.hasProperty("keyPass") ? project.property("keyPass") : null
        }
    }

    lintOptions {
        enable 'BackButton', 'EasterEgg', 'StopShip', 'IconExpectedSize', 'GradleDynamicVersion', 'NewerVersionAvailable'
        warning 'ImpliedQuantity', 'MissingQuantity'
        disable 'MissingTranslation', 'UnsafeNativeCodeLocation', 'InvalidPackage'
    }

    buildTypes {
        release {
            def hasSigningParameters = project.hasProperty("keystorePath") && project.property("keystorePath") != "" &&  \
                                       project.hasProperty("keyAlias") && project.property("keyAlias") != "" &&  \
                                       project.hasProperty("keystorePass") && project.hasProperty("keyPass")
            signingConfig hasSigningParameters ? signingConfigs.release : null
        }
    }

    flavorDimensions "implementation"

    productFlavors {
        noovpn3 {
            dimension "implementation"
            buildConfigField 'boolean', 'openvpn3', 'false'
        }
        normal {
            dimension "implementation"
            buildConfigField 'boolean', 'openvpn3', 'true'

        }

    }


    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

// Ensure native build is run before assets, so assets are ready to be merged into the apk
android.applicationVariants.all { variant ->
    variant.mergeAssets.dependsOn(variant.externalNativeBuildTasks)
}


android.applicationVariants.all { variant ->
    variant.productFlavors.each {
        if (it.dimension == 'implementation' &&  it.name != 'noovpn3')
            variant.getJavaCompiler().dependsOn(generateOpenVPN3Swig)

    }

}

def requireFileInDirectory(String directory, String file) {
    if (fileTree(dir: directory, include: '**/' + file).isEmpty()) {
        throw new GradleException('Not found ' + file + ' in ' + directory + ' directory')
    }
}

def copyFile(String file, String sourcePath, String destinationPath) {
    requireFileInDirectory(sourcePath, file)
    copy {
        from sourcePath + '/' + file
        into destinationPath
    }
}

def copyFromBinaryDeps(String projectName, String architecture, String file, String destinationPath) {
    def sourcePath = '../external/' + projectName + '/' + architecture + '/lib'
    copyFile(file, sourcePath, destinationPath)
}

task copyNativeLibs() {
    def jniFolder_armv7a = 'src/main/jniLibs/armeabi-v7a'
    copyFromBinaryDeps('pkcs11ecp', 'android-armv7a', 'librtpkcs11ecp.so', jniFolder_armv7a)
}
